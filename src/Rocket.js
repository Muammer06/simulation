import { CONSTANTS } from './constants.js';  // Sabit deƒüerleri i√ße aktar
import * as THREE from 'three';             // Three.js k√ºt√ºphanesi
import RocketMotion from './RocketMotion.js'; // Roket hareket y√∂netimi

class Rocket {
    constructor(index) {
        this.index = index;
        this.fuel = CONSTANTS.MAX_FUEL;      // Maksimum yakƒ±t seviyesi
        this.route = [];                    // ƒ∞zlenen rota
        this.alive = true;                  // Roketin durumu
        this.motion = new RocketMotion();   // Roket hareket y√∂neticisi
        this.currentTarget = null;          // ≈ûu anki hedef
        this.previousPosition = null;       // √ñnceki pozisyon (yakƒ±t hesabƒ± i√ßin)

        this.createRocket();                // Roket modeli olu≈ütur
        this.createTrail();                 // Roket izi olu≈ütur
    }

    /**
     * üöÄ Roket modelini olu≈üturur.
     */
    createRocket() {
        const geometry = new THREE.CylinderGeometry(
            CONSTANTS.EARTH_RADIUS * 0.04,
            CONSTANTS.EARTH_RADIUS * 0.02,
            CONSTANTS.EARTH_RADIUS * 0.1,
            32
        );

        const textureLoader = new THREE.TextureLoader();
        const rocketTexture = textureLoader.load('textures/rocket/rocket_texture.jpg');

        const material = new THREE.MeshPhongMaterial({
            map: rocketTexture,
            shininess: 50,
            emissive: 0x111111
        });

        this.mesh = new THREE.Mesh(geometry, material);

        const coneGeometry = new THREE.ConeGeometry(
            CONSTANTS.EARTH_RADIUS * 0.04,
            CONSTANTS.EARTH_RADIUS * 0.1,
            32
        );

        const coneMaterial = new THREE.MeshPhongMaterial({
            color: 0xff0000,
            shininess: 50
        });

        const cone = new THREE.Mesh(coneGeometry, coneMaterial);
        cone.position.set(0, CONSTANTS.EARTH_RADIUS * 0.05, 0);
        this.mesh.add(cone);
    }

    /**
     * üåü Roketin izini olu≈üturur.
     */
    createTrail() {
        const trailGeometry = new THREE.BufferGeometry();
        const trailMaterial = new THREE.LineBasicMaterial({
            color: 0x00ff00,
            opacity: 0.5,
            transparent: true
        });

        this.trail = {
            line: new THREE.Line(trailGeometry, trailMaterial),
            positions: []
        };
    }

    /**
     * üéØ Rastgele bir uyduya hareket eder.
     * @param {Array} satellites - Uydular dizisi.
     */
    moveToRandomSatellite(satellites) {
        if (!this.alive) return;

        const availableSatellites = satellites.filter(sat => !this.route.includes(sat));
        if (availableSatellites.length === 0) {
            this.alive = false;
            console.warn(`Roket ${this.index}: Uygun hedef kalmadƒ±.`);
            return;
        }

        const target = availableSatellites[Math.floor(Math.random() * availableSatellites.length)];
        this.route.push(target);
        this.motion.planPath(this, target);
    }

    /**
     * ‚è≥ Roketi g√ºnceller ve hareketini saƒülar.
     * @param {number} deltaTime - Ge√ßen s√ºre.
     */
    update(deltaTime) {
        if (!this.alive || !this.motion.currentPath) return;
    
        const completed = this.motion.updatePosition(this, deltaTime);
        this.consumeFuel(deltaTime);
    
        if (completed) {
            console.log(`Roket ${this.index}: ${this.currentTarget?.name} hedefine ula≈ütƒ±.`);
            this.motion.reset();
        }
    
        this.updateTrail();
    }
    
    /**
     * ‚õΩ Yakƒ±t t√ºketimini hesaplar ve g√ºnceller.
     * @param {number} deltaTime - Ge√ßen s√ºre.
     */
    consumeFuel(deltaTime) {
        const currentPosition = this.mesh.position.clone();

        if (!this.previousPosition) {
            this.previousPosition = currentPosition;
            return;
        }

        const distanceTravelled = currentPosition.distanceTo(this.previousPosition);
        const fuelToConsume = distanceTravelled * CONSTANTS.FUEL_CONSUMPTION_RATE;

        if (this.fuel - fuelToConsume < this.calculateRequiredFuelToMoon()) {
            console.warn('Yakƒ±t kritik seviyede, t√ºketim durduruldu.');
            return;
        }

        this.fuel -= fuelToConsume;
        this.previousPosition = currentPosition;

        console.log(`Yakƒ±t T√ºketildi: ${fuelToConsume.toFixed(2)} L, Kalan Yakƒ±t: ${this.fuel.toFixed(2)} L`);
    }

    /**
     * üöÄ Uyduya yakƒ±t aktarƒ±r.
     * @param {Object} satellite - Hedef uydu.
     */
    refuelSatellite(satellite) {
        const requiredFuel = 100 - satellite.fuel;
        const fuelToTransfer = Math.min(requiredFuel, CONSTANTS.FUEL_TRANSFER_RATE, this.fuel - this.calculateRequiredFuelToMoon());

        if (fuelToTransfer <= 0) {
            console.warn('Yeterli yakƒ±t yok, aktarƒ±m durduruldu.');
            return;
        }

        satellite.fuel += fuelToTransfer;
        this.fuel -= fuelToTransfer;

        console.log(`Uyduya ${fuelToTransfer.toFixed(2)} L yakƒ±t aktarƒ±ldƒ±. Roket kalan yakƒ±t: ${this.fuel.toFixed(2)} L`);
    }

    /**
     * üåï Ay'a d√∂n√º≈ü i√ßin gerekli yakƒ±tƒ± hesaplar.
     */
    calculateRequiredFuelToMoon() {
        const distanceToMoon = CONSTANTS.MOON_ORBIT_RADIUS;
        return (distanceToMoon / CONSTANTS.ROCKET_SPEED) * CONSTANTS.FUEL_CONSUMPTION_RATE * 1.5;
    }

    /**
     * üìç Roket izini g√ºnceller.
     */
    updateTrail() {
        this.trail.positions.push(this.mesh.position.clone());
        if (this.trail.positions.length > CONSTANTS.MAX_TRAIL_LENGTH) {
            this.trail.positions.shift();
        }
        this.trail.line.geometry.setFromPoints(this.trail.positions);
    }

    /**
     * üîÑ Roketi sƒ±fƒ±rlar.
     */
    reset() {
        this.mesh.position.set(CONSTANTS.MOON_ORBIT_RADIUS, 0, 0);
        this.motion.reset();
        this.fuel = CONSTANTS.MAX_FUEL;
        this.previousPosition = null;
        console.log('Roket sƒ±fƒ±rlandƒ± ve ba≈ülangƒ±√ß konumuna d√∂nd√º.');
    }
}

export default Rocket;
